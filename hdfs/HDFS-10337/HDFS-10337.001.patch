diff --git hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/StatisticsEditsVisitor.java hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/StatisticsEditsVisitor.java
index c173e17..c84e2ed 100644
--- hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/StatisticsEditsVisitor.java
+++ hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/StatisticsEditsVisitor.java
@@ -107,16 +107,17 @@ private void incrementOpCodeCount(FSEditLogOpCodes opCode) {
    * @return statistics in in string format, suitable for printing
    */
   public String getStatisticsString() {
-    StringBuffer sb = new StringBuffer();
+    StringBuilder sb = new StringBuilder();
     sb.append(String.format(
         "    %-30.30s      : %d%n",
         "VERSION", version));
     for(FSEditLogOpCodes opCode : FSEditLogOpCodes.values()) {
+      Long count = opCodeCount.get(opCode);
       sb.append(String.format(
-        "    %-30.30s (%3d): %d%n",
-        opCode.toString(),
-        opCode.getOpCode(),
-        opCodeCount.get(opCode)));
+          "    %-30.30s (%3d): %d%n",
+          opCode.toString(),
+          opCode.getOpCode(),
+          count == null ? Long.valueOf(0L) : count));
     }
     return sb.toString();
   }
diff --git hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/TestOfflineEditsViewer.java hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/TestOfflineEditsViewer.java
index c5bc721..a21bc8f 100644
--- hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/TestOfflineEditsViewer.java
+++ hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/tools/offlineEditsViewer/TestOfflineEditsViewer.java
@@ -28,6 +28,7 @@
 import java.io.PrintStream;
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
+import java.util.Map;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.logging.Log;
@@ -308,4 +309,33 @@ public void testOfflineEditsViewerHelpMessage() throws Throwable {
       IOUtils.closeStream(out);
     }
   }
+
+  @Test
+  public void testStatisticsStrWithNullOpCodeCount() throws IOException {
+    String editFilename = nnHelper.generateEdits();
+    String outFilename = editFilename + ".stats";
+    FileOutputStream fout = new FileOutputStream(outFilename);
+    StatisticsEditsVisitor visitor = new StatisticsEditsVisitor(fout);
+    OfflineEditsViewer oev = new OfflineEditsViewer();
+
+    String statisticsStr = null;
+    if (oev.go(editFilename, outFilename, "stats", new Flags(), visitor) == 0) {
+      statisticsStr = visitor.getStatisticsString();
+    }
+    Assert.assertNotNull(statisticsStr);
+
+    String str;
+    Long count;
+    Map<FSEditLogOpCodes, Long> opCodeCount = visitor.getStatistics();
+    for (FSEditLogOpCodes opCode : FSEditLogOpCodes.values()) {
+      count = opCodeCount.get(opCode);
+      // Verify the str when the opCode's count is null
+      if (count == null) {
+        str =
+            String.format("    %-30.30s (%3d): %d%n", opCode.toString(),
+                opCode.getOpCode(), Long.valueOf(0L));
+        assertTrue(statisticsStr.contains(str));
+      }
+    }
+  }
 }

diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerExitStatus.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerExitStatus.java
index f88fa3b..5c32acf 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerExitStatus.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/ContainerExitStatus.java
@@ -72,4 +72,8 @@
    */
   public static final int KILLED_AFTER_APP_COMPLETION = -107;
 
+  /**
+   * Container terminated because of exceeding allocated cpu vcores.
+   */
+  public static final int KILLED_EXCEEDED_VCORES = -108;
 }
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
index da076eb..6d7f717 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/conf/YarnConfiguration.java
@@ -820,6 +820,11 @@ private static void addDeprecatedKeys() {
       + "vmem-check-enabled";
   public static final boolean DEFAULT_NM_VMEM_CHECK_ENABLED = true;
 
+  /** Specifies whether cpu vcores check is enabled. */
+  public static final String NM_VCORES_CHECK_ENABLED = NM_PREFIX
+      + "vcores-check-enabled";
+  public static final boolean DEFAULT_NM_VCORES_CHECK_ENABLED = false;
+
   /** Conversion ratio for physical memory to virtual memory. */
   public static final String NM_VMEM_PMEM_RATIO =
     NM_PREFIX + "vmem-pmem-ratio";
@@ -829,6 +834,11 @@ private static void addDeprecatedKeys() {
   public static final String NM_VCORES = NM_PREFIX + "resource.cpu-vcores";
   public static final int DEFAULT_NM_VCORES = 8;
 
+  /** Limit ratio of Virtual CPU Cores which can be allocated for containers. */
+  public static final String NM_VCORES_LIMITED_RATIO = NM_PREFIX
+      + "resource.cpu-vcores.limited.ratio";
+  public static final float DEFAULT_NM_VCORES_LIMITED_RATIO = 0.8f;
+
   /** Percentage of overall CPU which can be allocated for containers. */
   public static final String NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT =
       NM_PREFIX + "resource.percentage-physical-cpu-limit";
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ResourceView.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ResourceView.java
index 4fde7b9..a0e7737 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ResourceView.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ResourceView.java
@@ -29,4 +29,6 @@
   boolean isPmemCheckEnabled();
 
   long getVCoresAllocatedForContainers();
+
+  boolean isVcoresCheckEnabled();
 }
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java
index 5153051..85cdfd1 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java
@@ -72,6 +72,8 @@
 
   private boolean pmemCheckEnabled;
   private boolean vmemCheckEnabled;
+  private boolean vcoresCheckEnabled;
+  private float vcoresLimitedRatio;
 
   private long maxVCoresAllottedForContainers;
 
@@ -144,8 +146,19 @@ protected void serviceInit(Configuration conf) throws Exception {
         YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);
     vmemCheckEnabled = conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,
         YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);
+    vcoresCheckEnabled =
+        conf.getBoolean(YarnConfiguration.NM_VCORES_CHECK_ENABLED,
+            YarnConfiguration.DEFAULT_NM_VCORES_CHECK_ENABLED);
     LOG.info("Physical memory check enabled: " + pmemCheckEnabled);
     LOG.info("Virtual memory check enabled: " + vmemCheckEnabled);
+    LOG.info("Cpu vcores check enabled: " + vcoresCheckEnabled);
+
+    if (vcoresCheckEnabled) {
+      vcoresLimitedRatio =
+          conf.getFloat(YarnConfiguration.NM_VCORES_LIMITED_RATIO,
+              YarnConfiguration.DEFAULT_NM_VCORES_LIMITED_RATIO);
+      LOG.info("Vcores limited ratio: " + vcoresLimitedRatio);
+    }
 
     nodeCpuPercentageForYARN =
         NodeManagerHardwareUtils.getNodeCpuPercentage(conf);
@@ -188,9 +201,9 @@ private boolean isEnabled() {
                 + this.getClass().getName() + " is disabled.");
             return false;
     }
-    if (!(isPmemCheckEnabled() || isVmemCheckEnabled())) {
-      LOG.info("Neither virutal-memory nor physical-memory monitoring is " +
-          "needed. Not running the monitor-thread");
+    if (!(isPmemCheckEnabled() || isVmemCheckEnabled() || isVcoresCheckEnabled())) {
+      LOG.info("The virutal-memory, physical-memory and cpu-vcores monitoring is not"
+          + "needed. Not running the monitor-thread");
       return false;
     }
 
@@ -472,6 +485,7 @@ public void run() {
             }
 
             boolean isMemoryOverLimit = false;
+            boolean isCpuVcoresOverLimit = false;
             String msg = "";
             int containerExitStatus = ContainerExitStatus.INVALID;
             if (isVmemCheckEnabled()
@@ -499,9 +513,18 @@ public void run() {
                   pId, containerId, pTree);
               isMemoryOverLimit = true;
               containerExitStatus = ContainerExitStatus.KILLED_EXCEEDED_PMEM;
+            } else if (isVcoresCheckEnabled()
+                && cpuUsageTotalCoresPercentage > vcoresLimitedRatio) {
+              msg =
+                  String.format(
+                      "Container [pid=%s,containerID=%s] is running beyond %s vcores limits."
+                          + " Current usage: %s. Killing container.\n", pId,
+                      containerId, vcoresLimitedRatio);
+              isCpuVcoresOverLimit = true;
+              containerExitStatus = ContainerExitStatus.KILLED_EXCEEDED_VCORES;
             }
 
-            if (isMemoryOverLimit) {
+            if (isMemoryOverLimit || isCpuVcoresOverLimit) {
               // Virtual or physical memory over limit. Fail the container and
               // remove
               // the corresponding process tree
@@ -631,4 +654,9 @@ public void handle(ContainersMonitorEvent monitoringEvent) {
       // TODO: Wrong event.
     }
   }
+
+  @Override
+  public boolean isVcoresCheckEnabled() {
+    return this.vcoresCheckEnabled;
+  }
 }
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/TestContainersMonitor.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/TestContainersMonitor.java
index 1f2d067..e881f0a 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/TestContainersMonitor.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/TestContainersMonitor.java
@@ -292,6 +292,131 @@ public void testContainerKillOnMemoryOverflow() throws IOException,
             pid, Signal.NULL));
   }
 
+  @Before
+  public void vcoresOverflowSetup() throws IOException {
+    conf.setClass(
+        YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,
+        LinuxResourceCalculatorPlugin.class, ResourceCalculatorPlugin.class);
+    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, false);
+    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, false);
+    conf.setBoolean(YarnConfiguration.NM_VCORES_CHECK_ENABLED, true);
+    conf.setFloat(YarnConfiguration.NM_VCORES_LIMITED_RATIO, 0.1f);
+    super.setup();
+  }
+
+  @Test
+  public void testContainerKillOnVcoresOverflow() throws IOException,
+      InterruptedException, YarnException {
+
+    if (!ProcfsBasedProcessTree.isAvailable()) {
+      return;
+    }
+
+    containerManager.start();
+
+    File scriptFile = new File(tmpDir, "scriptFile.sh");
+    PrintWriter fileWriter = new PrintWriter(scriptFile);
+    File processStartFile =
+        new File(tmpDir, "start_file.txt").getAbsoluteFile();
+    fileWriter.write("\numask 0"); // So that start file is readable by the
+                                   // test.
+    fileWriter.write("\necho Hello World! > " + processStartFile);
+    fileWriter.write("\necho $$ >> " + processStartFile);
+    fileWriter.write("\nsleep 15");
+    fileWriter.close();
+
+    ContainerLaunchContext containerLaunchContext =
+        recordFactory.newRecordInstance(ContainerLaunchContext.class);
+    // ////// Construct the Container-id
+    ApplicationId appId = ApplicationId.newInstance(0, 0);
+    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);
+    ContainerId cId = ContainerId.newContainerId(appAttemptId, 0);
+    int port = 12345;
+
+    URL resource_alpha =
+        ConverterUtils.getYarnUrlFromPath(localFS
+            .makeQualified(new Path(scriptFile.getAbsolutePath())));
+    LocalResource rsrc_alpha =
+        recordFactory.newRecordInstance(LocalResource.class);
+    rsrc_alpha.setResource(resource_alpha);
+    rsrc_alpha.setSize(-1);
+    rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
+    rsrc_alpha.setType(LocalResourceType.FILE);
+    rsrc_alpha.setTimestamp(scriptFile.lastModified());
+    String destinationFile = "dest_file";
+    Map<String, LocalResource> localResources =
+        new HashMap<String, LocalResource>();
+    localResources.put(destinationFile, rsrc_alpha);
+    containerLaunchContext.setLocalResources(localResources);
+    List<String> commands = new ArrayList<String>();
+    commands.add("/bin/bash");
+    commands.add(scriptFile.getAbsolutePath());
+    containerLaunchContext.setCommands(commands);
+    Resource r = BuilderUtils.newResource(8 * 1024 * 1024, 8);
+    ContainerTokenIdentifier containerIdentifier =
+        new ContainerTokenIdentifier(cId, context.getNodeId().toString(), user,
+          r, System.currentTimeMillis() + 120000, 123, DUMMY_RM_IDENTIFIER,
+          Priority.newInstance(0), 0);
+    Token containerToken =
+        BuilderUtils.newContainerToken(context.getNodeId(),
+          containerManager.getContext().getContainerTokenSecretManager()
+            .createPassword(containerIdentifier), containerIdentifier);
+    StartContainerRequest scRequest =
+        StartContainerRequest.newInstance(containerLaunchContext,
+          containerToken);
+    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();
+    list.add(scRequest);
+    StartContainersRequest allRequests =
+        StartContainersRequest.newInstance(list);
+    containerManager.startContainers(allRequests);
+
+    int timeoutSecs = 0;
+    while (!processStartFile.exists() && timeoutSecs++ < 20) {
+      Thread.sleep(1000);
+      LOG.info("Waiting for process start-file to be created");
+    }
+    Assert.assertTrue("ProcessStartFile doesn't exist!",
+        processStartFile.exists());
+
+    // Now verify the contents of the file
+    BufferedReader reader =
+        new BufferedReader(new FileReader(processStartFile));
+    Assert.assertEquals("Hello World!", reader.readLine());
+    // Get the pid of the process
+    String pid = reader.readLine().trim();
+    // No more lines
+    Assert.assertEquals(null, reader.readLine());
+
+    BaseContainerManagerTest.waitForContainerState(containerManager, cId,
+        ContainerState.COMPLETE, 60);
+
+    List<ContainerId> containerIds = new ArrayList<ContainerId>();
+    containerIds.add(cId);
+    GetContainerStatusesRequest gcsRequest =
+        GetContainerStatusesRequest.newInstance(containerIds);
+    ContainerStatus containerStatus =
+        containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);
+    Assert.assertEquals(ContainerExitStatus.KILLED_EXCEEDED_VCORES,
+        containerStatus.getExitStatus());
+    String expectedMsgPattern =
+        "Container \\[pid=" + pid + ",containerID=" + cId
+            + "\\] is running beyond virtual memory limits. Current usage: "
+            + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B physical memory used; "
+            + "[0-9.]+ ?[KMGTPE]?B of [0-9.]+ ?[KMGTPE]?B virtual memory used. "
+            + "Killing container.\nDump of the process-tree for "
+            + cId + " :\n";
+    Pattern pat = Pattern.compile(expectedMsgPattern);
+    Assert.assertEquals("Expected message pattern is: " + expectedMsgPattern
+        + "\n\nObserved message is: " + containerStatus.getDiagnostics(),
+        true, pat.matcher(containerStatus.getDiagnostics()).find());
+
+    // Assert that the process is not alive anymore
+    Assert.assertFalse("Process is still alive!",
+        exec.signalContainer(user,
+            pid, Signal.NULL));
+  }
+
+
   @Test(timeout = 20000)
   public void testContainerMonitorMemFlags() {
     ContainersMonitor cm = null;
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServer.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServer.java
index a7006e0..99a10e5 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServer.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServer.java
@@ -102,6 +102,10 @@ public boolean isVmemCheckEnabled() {
       public boolean isPmemCheckEnabled() {
         return true;
       }
+      @Override
+      public boolean isVcoresCheckEnabled() {
+        return false;
+      }
     };
     Configuration conf = new Configuration();
     conf.set(YarnConfiguration.NM_LOCAL_DIRS, testRootDir.getAbsolutePath());
@@ -165,6 +169,10 @@ public boolean isVmemCheckEnabled() {
       public boolean isPmemCheckEnabled() {
         return true;
       }
+      @Override
+      public boolean isVcoresCheckEnabled() {
+        return false;
+      }
     };
     Configuration conf = new Configuration();
     conf.set(YarnConfiguration.NM_LOCAL_DIRS, testRootDir.getAbsolutePath());
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServices.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServices.java
index 7caad4a..86d15c8 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServices.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServices.java
@@ -135,6 +135,10 @@ public boolean isVmemCheckEnabled() {
         public boolean isPmemCheckEnabled() {
           return true;
         }
+        @Override
+        public boolean isVcoresCheckEnabled() {
+          return false;
+        }
       };
       nmWebApp = new NMWebApp(resourceView, aclsManager, dirsHandler);
       bind(JAXBContextResolver.class);
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesApps.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesApps.java
index 3e7aac8..bf523cb 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesApps.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesApps.java
@@ -131,6 +131,11 @@ public boolean isVmemCheckEnabled() {
         public boolean isPmemCheckEnabled() {
           return true;
         }
+
+        @Override
+        public boolean isVcoresCheckEnabled() {
+          return false;
+        }
       };
       nmWebApp = new NMWebApp(resourceView, aclsManager, dirsHandler);
       bind(JAXBContextResolver.class);
diff --git hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesContainers.java hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesContainers.java
index ceb1d57..f9b4723 100644
--- hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesContainers.java
+++ hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/test/java/org/apache/hadoop/yarn/server/nodemanager/webapp/TestNMWebServicesContainers.java
@@ -120,6 +120,11 @@ public boolean isVmemCheckEnabled() {
         public boolean isPmemCheckEnabled() {
           return true;
         }
+
+        @Override
+        public boolean isVcoresCheckEnabled() {
+          return false;
+        }
       };
       conf.set(YarnConfiguration.NM_LOCAL_DIRS, testRootDir.getAbsolutePath());
       conf.set(YarnConfiguration.NM_LOG_DIRS, testLogDir.getAbsolutePath());
